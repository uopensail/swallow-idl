// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.3
// source: uploadapi.proto

package swallowapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SwallowServiceClient is the client API for SwallowService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SwallowServiceClient interface {
	Trace(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Log(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type swallowServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSwallowServiceClient(cc grpc.ClientConnInterface) SwallowServiceClient {
	return &swallowServiceClient{cc}
}

func (c *swallowServiceClient) Trace(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/swallowapi.SwallowService/Trace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swallowServiceClient) Log(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/swallowapi.SwallowService/Log", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SwallowServiceServer is the server API for SwallowService service.
// All implementations must embed UnimplementedSwallowServiceServer
// for forward compatibility
type SwallowServiceServer interface {
	Trace(context.Context, *Request) (*Response, error)
	Log(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedSwallowServiceServer()
}

// UnimplementedSwallowServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSwallowServiceServer struct {
}

func (UnimplementedSwallowServiceServer) Trace(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Trace not implemented")
}
func (UnimplementedSwallowServiceServer) Log(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Log not implemented")
}
func (UnimplementedSwallowServiceServer) mustEmbedUnimplementedSwallowServiceServer() {}

// UnsafeSwallowServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SwallowServiceServer will
// result in compilation errors.
type UnsafeSwallowServiceServer interface {
	mustEmbedUnimplementedSwallowServiceServer()
}

func RegisterSwallowServiceServer(s grpc.ServiceRegistrar, srv SwallowServiceServer) {
	s.RegisterService(&SwallowService_ServiceDesc, srv)
}

func _SwallowService_Trace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwallowServiceServer).Trace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swallowapi.SwallowService/Trace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwallowServiceServer).Trace(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwallowService_Log_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwallowServiceServer).Log(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swallowapi.SwallowService/Log",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwallowServiceServer).Log(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// SwallowService_ServiceDesc is the grpc.ServiceDesc for SwallowService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SwallowService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "swallowapi.SwallowService",
	HandlerType: (*SwallowServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Trace",
			Handler:    _SwallowService_Trace_Handler,
		},
		{
			MethodName: "Log",
			Handler:    _SwallowService_Log_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "uploadapi.proto",
}
